0x0013 -> 19

signed bit representation
0b10000011 -> -3
0b00000011 -> 3

adding is complicated with signed bit

0b00000000 -> 0
0b10000000 -> -0

also have 2 zeros!

2's complement

numbers without 1's in msb are the same as normal. otherwise, invert and add 1

0xFFFF


(~0b11111111111111) + 1
( 0b00000000000000) + 1
( 0b00000000000001) -> -1

0x8000
(~0b1000000000000000) + 1
( 0b0111111111111111) + 1
( 0b1000000000000000) -> -2^15

-3 + 4
 0b0000000000000011 -> 3

~0b0000000000000011 + 1
 0b1111111111111100 + 1
 0b1111111111111101 -> -3 

 0b0000000000000100 -> 4

0b1111111111111101 +
0b0000000000000100 =
0b0000000000000001


sign extension

int8_t a = -4  // (0b11111100)
int16_t b = (int16_t) a // (0b1111111111111100)


0 01111111 10000000000000000000000

-1^0 * (1 + 0.5) * 2^(127 - 127)
1 * (1.5) * 2^0
1.5

1 10000000 01100000000000000000000 

-1^1 * (1 + 0.25 + 0.125) * 2^(128 - 127)
-1 * (1.375) * 2^1
-2.750

2.5

1.25
2^1 * 1 + 0b0100000

0.375 * 2^2
1.5
= 

27 * 2^-4 =

27/16 = 1.6875

1 +  0.5000 + 0.1875
1 + 0.5000 + 0.1250 + 0.0625

0b101100000000000

(exp - 127 ) = -4
exp = 123